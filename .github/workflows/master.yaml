name: Master
on: 
  push:
    branches:
      - master
    
jobs:
  # Disabled for debug speed
  # build-firebase-staging:
  #   #TODO: only execute when file changes in functions/**/*
  #   name: Build staging firebase
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Repo
  #       uses: actions/checkout@v1
  #     - uses: actions/setup-node@v1
  #       with:
  #         node-version: '10.x'
  #     # yarn install with caching
  #     - uses: bahmutov/npm-install@v1
  #       with:
  #         working-directory: functions
  #     - working-directory: functions
  #       run: yarn build
  #     - name: Archive firebase functions
  #       uses: actions/upload-artifact@master
  #       with:
  #         name: firebase-functions-staging
  #         path: functions/lib
  
  # Disabled for debug speed
  # firebase-staging:
  #   #TODO: only execute when file changes in functions/**/*
  #   name: Deploy firebase to staging
  #   runs-on: ubuntu-latest
  #   needs: build-firebase-staging
  #   steps:
  #     - name: Checkout Repo
  #       uses: actions/checkout@v1
  #     - uses: actions/setup-node@v1
  #       with:
  #         node-version: '10.x'
  #     - name: Download Artifact
  #       uses: actions/download-artifact@master
  #       with:
  #         name: firebase-functions-staging
  #         path: functions/lib
  #     # yarn install with caching
  #     - uses: bahmutov/npm-install@v1
  #       with:
  #         working-directory: functions
  #     - name: Deploy to firebase
  #       uses: w9jds/firebase-action@master
  #       with:
  #         args: deploy --only functions,firestore:rules
  #       env:
  #         FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
  #         PROJECT_ID: ${{ secrets.STAGING_FIREBASE_PROJECT_ID }}

  # Disabled to use 1 job for debug speed
  # build-staging:
  #   name: Build staging
  #   needs: firebase-staging
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Repo
  #       uses: actions/checkout@v1
  #     - uses: bahmutov/npm-install@v1 
  #     - run: yarn build:staging
  #     - name: Archive dist:staging
  #       uses: actions/upload-artifact@master
  #       with:
  #         name: dist-staging
  #         path: dist

  ui-tests:
    name: UI Tests
    # needs: firebase-staging
    runs-on: ubuntu-latest
    # strategy:
      # matrix:
        # the actual items in the array do not matter,
        # just the number - to force CI to sping 3 copies
        # of the current job in parallel
        # machines: [1, 2, 3]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v1
      # Cypress action manages installing/caching npm dependencies and Cypress binary.
      - name: Cypress Run
        uses: cypress-io/github-action@v1
        with:
          install: true
          start: yarn start
          build: yarn -v # serve already builds
          group: 'E2E Tests'
          record: true
          parallel: true
          wait-on: 'http://localhost:4200'
        env:
          # pass the Dashboard record key as an environment variable
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_KEY }}
          CYPRESS_TEST_UID: ${{ secrets.STAGING_TEST_UID }}
          # FIREBASE_CONFIG: ${{ secrets.STAGING_FIREBASE_CONFIG }}
          FIREBASE_TOKEN: ${{ secrets.STAGING_FIREBASE_TOKEN }}
          GITHUB_HEAD_REF: ${{ github.head_ref }}
          SERVICE_ACCOUNT: ${{ secrets.STAGING_SERVICE_ACCOUNT }}
          # start firebase
          FIREBASE_API_KEY: ${{ secrets.STAGING_FIREBASE_API_KEY }}
          FIREBASE_AUTH_DOMAIN: ${{ secrets.STAGING_FIREBASE_AUTH_DOMAIN }}
          FIREBASE_DATABASE_URL: ${{ secrets.STAGING_FIREBASE_DATABASE_URL }}
          FIREBASE_PROJECT_ID: ${{ secrets.STAGING_FIREBASE_PROJECT_ID }}
          FIREBASE_STORAGE_BUCKET: ${{ secrets.STAGING_FIREBASE_STORAGE_BUCKET }}
          FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.STAGING_FIREBASE_MESSAGING_SENDER_ID }}
          FIREBASE_APP_ID: ${{ secrets.STAGING_FIREBASE_APP_ID }}
          FIREBASE_MEASUREMENT_ID: ${{ secrets.STAGING_FIREBASE_MEASUREMENT_ID }}
          ANGULAR_PRODUCTION: ${{ secrets.STAGING_ANGULAR_PRODUCTION }}
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: ui-tests
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 12
      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release
  deploy-netlify:
    runs-on: ubuntu-latest
    needs: release
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        with:
          node-version: "12.x"
      - run: yarn install
      - run: yarn build
        env:
          FIREBASE_API_KEY: ${{ secrets.PROD_FIREBASE_API_KEY }}
          FIREBASE_AUTH_DOMAIN: ${{ secrets.PROD_FIREBASE_AUTH_DOMAIN }}
          FIREBASE_DATABASE_URL: ${{ secrets.PROD_FIREBASE_DATABASE_URL }}
          FIREBASE_PROJECT_ID: ${{ secrets.PROD_FIREBASE_PROJECT_ID }}
          FIREBASE_STORAGE_BUCKET: ${{ secrets.PROD_FIREBASE_STORAGE_BUCKET }}
          FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.PROD_FIREBASE_MESSAGING_SENDER_ID }}
          FIREBASE_APP_ID: ${{ secrets.PROD_FIREBASE_APP_ID }}
          FIREBASE_MEASUREMENT_ID: ${{ secrets.PROD_FIREBASE_MEASUREMENT_ID }}
          ANGULAR_PRODUCTION: ${{ secrets.PROD_ANGULAR_PRODUCTION }}
      - name: run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.3.x
          lhci autorun --upload.target=temporary-public-storage || echo "LHCI failed!"
      - uses: netlify/actions/cli@master
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        with:
          args: deploy --dir=dist/quotes --prod
          secrets: '["NETLIFY_AUTH_TOKEN", "NETLIFY_SITE_ID"]'
