rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    // [READ] Data that exists on the Firestore document
    function existingData() {
      return resource.data;
    }

    // [WRITE] Data that is sent to a Firestore document
    function incomingData() {
      return request.resource.data;
    }

    function incomingUidMatches() {
        return isUser(incomingData().uid);
    }

    function existingUidMatches() {
        return isUser(existingData().uid);
    }

    function isUser(userId) {
      return request.auth.uid == userId;
    }

    function isUserVerified() {
      return request.auth.token.role in ['admin', 'editor', 'viewer'] && request.auth.token.role != 'unknown'
    }

    function hasWriteRole() {
      return request.auth.token.role in ['admin', 'editor']
    }
    
    match /quotes/{quoteId} {
      allow create: if isSignedIn() && isUserVerified() && hasWriteRole();
      allow read: if isSignedIn() && isUserVerified();
      // allow update: if isSignedIn() && isUserVerified() && incomingUidMatches() && existingUidMatches();
      allow update: if isSignedIn() && isUserVerified() && hasWriteRole();
      allow delete: if isSignedIn() && isUserVerified() && hasWriteRole();
    }

    match /users/{userId} {
      allow get;
      allow read: if isSignedIn() && isUserVerified();
      allow update: if isSignedIn() && isUserVerified() && incomingUidMatches() && existingUidMatches();
      allow delete: if isSignedIn() && isUserVerified() && existingUidMatches();
    }
  }
}