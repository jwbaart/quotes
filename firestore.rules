rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isJwbaart() {
      return request.auth.uid == 'd3tapkDDszU4abf6lKBQu4GNuCq1';
    }
    
    function isCiUser() {
      return request.auth.uid == 'FfaUoGeoFVQvQErTVXCRrTgzCLp2';
    }
    
    function isBenTomUser() {
      return request.auth.uid == '7XVgmYTyrshlup04pMTRXOu8Dqh1';
    }

    function requestMatchesUID() {
        return request.auth.uid == request.resource.data.uid;
    }

    function resourceMatchesUID() {
        return request.auth.uid == resource.data.uid;
    }

    match /quotes/{quoteId} {
      // TODO: rewrite to specific roles
      allow read: if (isJwbaart() || isCiUser() || isBenTomUser());
      allow create: if (isJwbaart() || isCiUser() || isBenTomUser());
      allow write: if requestMatchesUID();
      allow update: if requestMatchesUID() && resourceMatchesUID();
      allow delete: if resourceMatchesUID();
    }

    match /users/{userId} {
      allow get;
      allow write: if requestMatchesUID();
    }

    // Alterntatively, for role-based access, assign specific roles to users
    // match /quotes/{document} {
      // allow read: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "Reader"
      // allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "Writer" 
    // }
  }
}